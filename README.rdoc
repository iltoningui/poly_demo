== Demo of polymorphic associations and nested forms

This is an extremely simple demo of polymorphic associations and nested forms in Rails. It has three models,
<tt>Post</tt>, <tt>Editorial</tt> and <tt>Comment</tt> - the last one being polymorphic and belonging to both
<tt>Post</tt> and <tt>Editorial</tt>.


== Why?

Polymorphics associations are in some way straightforward, but the two most (deservedly) prominent intoductory texts on Rails
(RoR Tutorial by Michael Hartl and Agile Web Development with Rails by Ruby et al.) do not cover them. The Rails
Guides are not of much help either. Perform a web search on polymorphic associations and you will largely find
vartions of a Railscast on the topic. The problem is that the cast deals with the case of nested resources only,
and does address the issue of updating mutliple models with the same form. The approach that I'm using here is
derived from the fantastic Rails Recipes: Rails 3 Edition book by Chad Fowler.

== The short story

Pull the repository and look at the code :-).

== The long stroy

Here's what I've done to create the demo app, and why.

First, create the rails app:

  rails new poly_demo

Go into your new poly_demo directory and start the server:

  rails server

Generate two out of the box scaffolds for <tt>Post</tt> and <tt>Editorial</tt> which both have a <tt>title</tt> and <tt>content</tt>
attribute:

  rails generate scaffold Post title:string content:text
  rails generate scaffold Editorial title:string content:text

Then, generate the <tt>Comment</tt> model as follows:

  rails generate model Comment content:text commentable_id:integer commentable_type:string

This model has a <tt>content</tt> attribute, which will store the actual comment (note that the fact that this attribute is also
 called content, like the attribute in <tt>Post</tt> and <tt>Editorial</tt>, is purely coincidental and not necessary). The other two attributes,
<tt>commentable_id</tt> and <tt>commentable_type</tt>, are needed for the polymorphic assocations. Because the
<tt>Comment</tt> model belongs to many models (2 in our case), you can't just store an id for a post, or for an editorial -
you might have posts and editorials that have the exact same id. In polymorphic associations, the combination of an id and a type
solves this problem.

Finally, run the migrations:

  bundle exec rake db:migrate

With that, you should now be able to point your app to

  /posts

and

  /editorials

and be able to add posts and editorials. Admittedly, this is ugly looking, but that's not our focus here.

Now, let's implement the polymorphic assocations. In models/comment.rb, add

  belongs_to :commentable, polymorphic:true

In models/post.rb, add <tt>:comments</tt> and <tt>:comments_attributes</tt> to the list of <tt>attr_accessible</tt>. Further,
add the line

  has_many :comments, :as => :commentable, dependent: :destroy

(We'll skip the editorial model for now).

What this does is it associates <tt>Comment</tt> to <tt>Post</tt> through the association <tt>:commentable</tt> (you can
name the association whatever you want). We also want comments to be deleted when a post is deleted, hence the destroy
dependence.

You now have a polymorphic association, but how do you CRUD (create read update delete) comments belonging to post?

First, the creation. You want to have a nested form where both the model and the comments can be created (and later edited or deleted)
at the same time. In order to do that, you need to tell the <tt>Post</tt> model that it should accept nested attributes for
the comments. To do this, add the following to models/post.rb:

  accepts_nested_attributes_for :comments,
                                  reject_if:lambda { |attrs|
                                    attrs.all? { |key, value| value.blank? }
                                  },
                                  allow_destroy:true

The <tt>accepts_nested_attributes_for</tt> does the job - the rest of the code serves two important functions. The first
part ensures that we are not storing blank comments; the second part ensures that we can delete comments.

Now, let's update the form. In views/posts/_form.html.erb, you have a line

  <%= form_for(@post) do |f| %>

Change this to

  <%= form_for(@post.with_blank_comment) do |f| %>

This will call a method (which will have to generate) that will make sure that a comment is built - otherwise the form
elements for comments will not be shown.

In the same file, right before the submit button, add

  <%= f.fields_for(:comments) do |comments_form| %>
        <div class="field">
        <%=  comments_form.label 'Comment:' %>
        <%=  comments_form.text_field :content %>
        <%=  unless comments_form.object.new_record?
               comments_form.check_box('_destroy') + comments_form.label('_destroy','Remove')
             end %>
        </div>
    <% end %>

This renders the form element for the comment, and further ensures that there is a checkbox to delete the comment.

Now, let's not forget to create the <tt>with_blank_comment</tt> method. In models/post.rb, add

  def with_blank_comment
    comments.build
    self
  end

Ok, this should allow us to create (and update / delete) comments. Go ahead and try it out - you won't see the comments,
because we haven't implemented the show and index views, but you can verify that the comments are created, updated and
deleted through the console:

  rails console
  >> Comment.all

Notice that each comment has an <tt>id</tt> attribute (its unique identifier) as well as a <tt>commentable_id</tt> and
<tt>commentable_type</tt> attribute. The <tt>commentable_id</tt> is the id of the corresponding <tt>Post</tt>, and the
<tt>commentable_type</tt> should be Post.











First area to check is the application log files. Have "tail -f" commands
running on the server.log and development.log. Rails will automatically display
debugging and runtime information to these files. Debugging info will also be
shown in the browser on requests from 127.0.0.1.

You can also log your own messages directly into the log file from your code
using the Ruby logger class from inside your controllers. Example:

  class WeblogController < ActionController::Base
    def destroy
      @weblog = Weblog.find(params[:id])
      @weblog.destroy
      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
    end
  end

The result will be a message in your log file along the lines of:

  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!

More information on how to use the logger is at http://www.ruby-doc.org/core/

Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
several books available online as well:

* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)

These two books will bring you up to speed on the Ruby language and also on
programming in general.


== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |       |-- images
  |       |-- javascripts
  |       `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      |-- assets
          `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
